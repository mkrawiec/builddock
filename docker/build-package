#!/usr/bin/env bash

set -o nounset
set -o errexit

RPMBUILD=/home/rpmaker/rpmbuild
PROJECTS=$RPMBUILD/_projects
SOURCES=$RPMBUILD/SOURCES
SPECS=$RPMBUILD/SPECS

# Download the pristine sources and repack them into proper archive that can be
# used in .spec file
# @param download_url
# @param output_filename
download_sources()
{
    local download_url=$1; shift
    local output_filename=$1; shift
    local download_file=${download_url##*/}

    # Save file as tmp with original extension (e.g tmp.zip if zip file)
    curl -L $download_url -o $download_file

    # Repack the downloaded file
    touch outdir
    atool --save-outdir=outdir --extract $download_file
    local outdir=$(cat outdir)
    mv $outdir $output_filename
    rm outdir
    apack ${output_filename}.tar.gz $output_filename

    # Remove unpacked dir and original download
    rm -fr $output_filename
    rm $download_file
}

# Make symlinks from project/ to rpmbuild/
# @param signature <project>/<package>
make_symlinks()
{
    local signature=$1; shift
    local name=${signature##*/}

    pushd $SPECS
    # Symlink .spec file
    ln -s ../_projects/$signature/${name}.spec ${name}.spec
    popd

    pushd $SOURCES
    # Go to project files, find all files that are not service.sh or .spec
    # and symlink them in SOURCES
    find ../_projects/$signature -type f \
        -not -name 'serivce.sh' \
        -not -name '*.spec' \
        -exec ln -s {} . \;
    popd
}

# Populate rpmbuild dir with data from service.sh
# @param signature <project>/<package>
refresh_service()
{
    local signature=$1; shift
    local name=${signature##*/}

    pushd $PROJECTS/$signature
    source service.sh
    # If download url is set and file does not exist get it
    if [ -n $PKG_DOWNLOAD_URL ] && [ ! -f $name-${PKG_VERSION}.tar.gz ]; then
        download_sources $PKG_DOWNLOAD_URL $name-$PKG_VERSION
    fi
    popd

    make_symlinks $signature

    # Update version in .spec file
    sed -i "s/Version:.*/Version: $PKG_VERSION/g" "$SPECS/${name}.spec"
}

# Clean up tasks
clean_up()
{
    local signature=$1; shift
    local name=${signature##*/}

    # Add built src.rpm to project files
    rm -f $PROJECTS/$signature/*.src.rpm
    cp $RPMBUILD/SRPMS/${name}*.src.rpm $PROJECTS/$signature

    # Purge rpmbuild/
    find $RPMBUILD -mindepth 2 -not -name '.gitignore' -delete
}

main()
{
    local signature=$1; shift
    local name=${signature##*/}

    refresh_service $signature

    pushd $SPECS
    sudo dnf -y builddep ${name}.spec
    rpmbuild -ba "${name}.spec"
    popd

    clean_up $signature
}

main $@
